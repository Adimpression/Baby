package ai.ilikeplaces.servlets;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Created by IntelliJ IDEA.
 * User: Ravindranath Akila
 * Date: 1/7/12
 * Time: 12:22 PM
 */
public class OAuthFacebook extends AbstractOAuth {

    @Override
    OAuthProvider oAuthProvider() {
        return new OAuthProvider(
                "https://www.facebook.com/dialog/oauth",
                new OAuthAuthorizationRequest(
                        "code",
                        "139373316127498",
                        "http://www.ilikeplaces.com/oauth2",
                        null,
                        null
                ));
    }

    /**
     * <b>code</b>
     * <p/>
     * REQUIRED.  The authorization code generated by the
     * authorization server.  The authorization code MUST expire
     * shortly after it is issued to mitigate the risk of leaks.  A
     * maximum authorization code lifetime of 10 minutes is
     * RECOMMENDED.  The client MUST NOT use the authorization code
     * more than once.  If an authorization code is used more than
     * once, the authorization server MUST deny the request and SHOULD
     * attempt to revoke all tokens previously issued based on that
     * authorization code.  The authorization code is bound to the
     * client identifier and redirection URI.
     * <p/>
     * <b>state</b>
     * <p/>
     * REQUIRED if the "state" parameter was present in the client
     * authorization request.  The exact value received from the
     *
     * @param request
     * @param response
     */
    @Override
    void processRequest(final HttpServletRequest request, final HttpServletResponse response) {
        final OAuthAuthorizationResponse oAuthAuthorizationResponse = getOAuthAuthorizationResponse(request, response);
        if (oAuthAuthorizationResponse != null) {

        } else {
            // we ignore since a redirect will happen
        }
    }
}
